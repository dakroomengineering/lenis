{"version":3,"file":"lenis-svelte.mjs","sources":["../../src/instance-manager/intance-manager.ts","../../src/lenis.action.ts"],"sourcesContent":["import type Lenis from \"lenis\";\nimport { writable } from \"svelte/store\";\n\nclass LenisIntanceManager {\n    intances = writable<Record<string, Lenis>>({});\n\n\n    register(id: string, lenis: Lenis) {\n        this.intances.update(intances => {\n            intances[id] = lenis\n            return intances\n        })\n    }\n\n\n    unregister(id: string) {\n        this.intances.update(intances => {\n            delete intances[id];\n\n            return intances\n        })\n    }\n\n}\n\nexport default new LenisIntanceManager();\n","\nimport Lenis from 'lenis';\nimport type { Action } from 'svelte/action';\nimport { derived, type Readable } from 'svelte/store';\nimport type { LenisConfig } from './config/config.js';\nimport LenisInstanceManager from './instance-manager/intance-manager.js';\n\ninterface WithInstanceGet {\n    instance(id: string): Readable<Lenis>;\n    root(): Readable<Lenis>;\n}\n\nexport const lenis: Action<HTMLElement, LenisConfig | undefined> & WithInstanceGet= (el, config = {}) => {\n    const id = config.id || 'root';\n    const isGlobal = id === 'root'\n\n    const lenis = new Lenis({\n        ...config.options,\n        ...(\n            !isGlobal && {\n                wrapper: el,\n                content: el.firstChild as HTMLElement,\n            }\n        )\n    });\n\n    LenisInstanceManager.register(id, lenis)\n\n    let rafId: number;\n\n    const autoRaf = config.autoRaf || true;\n    if (autoRaf) {\n        const raf = (time: number) => {\n            lenis.raf(time);\n            rafId = requestAnimationFrame(raf)\n        }\n        rafId = requestAnimationFrame(raf);\n    }\n\n    return {\n        destroy () {\n            if (!rafId) return;\n            LenisInstanceManager.unregister(id);\n            cancelAnimationFrame(rafId);\n        }\n    };\n};\n\nlenis.instance = (id: string) => {\n    if (!id) throw new Error(`lenis.instance(<id>) should be called with a <id>. Your <id> is ${id}`)\n    return derived(LenisInstanceManager.intances, instances => instances[id])\n};\nlenis.root = () => lenis.instance('root');\n"],"names":["LenisInstanceManager","LenisIntanceManager","constructor","this","intances","writable","register","id","lenis","update","unregister","el","config","isGlobal","Lenis","Object","assign","options","wrapper","content","firstChild","rafId","autoRaf","raf","time","requestAnimationFrame","destroy","cancelAnimationFrame","instance","Error","derived","instances","root"],"mappings":"0EAyBA,IAAeA,EAAA,IAtBf,MAAMC,oBAAN,WAAAC,GACIC,KAAAC,SAAWC,EAAgC,CAAA,EAmB9C,CAhBG,QAAAC,CAASC,EAAYC,GACjBL,KAAKC,SAASK,QAAOL,IACjBA,EAASG,GAAMC,EACRJ,IAEd,CAGD,UAAAM,CAAWH,GACPJ,KAAKC,SAASK,QAAOL,WACVA,EAASG,GAETH,IAEd,GCTQ,MAAAI,MAAuE,CAACG,EAAIC,EAAS,MAC9F,MAAML,EAAKK,EAAOL,IAAM,OAClBM,EAAkB,SAAPN,EAEXC,EAAQ,IAAIM,EACXC,OAAAC,OAAAD,OAAAC,OAAA,CAAA,EAAAJ,EAAOK,UAELJ,GAAY,CACTK,QAASP,EACTQ,QAASR,EAAGS,cAOxB,IAAIC,EAFJrB,EAAqBM,SAASC,EAAIC,GAKlC,GADgBI,EAAOU,UAAW,EACrB,CACT,MAAMC,IAAOC,IACThB,EAAMe,IAAIC,GACVH,EAAQI,sBAAsBF,IAAI,EAEtCF,EAAQI,sBAAsBF,IACjC,CAED,MAAO,CACH,OAAAG,GACSL,IACLrB,EAAqBU,WAAWH,GAChCoB,qBAAqBN,GACxB,EACJ,EAGLb,MAAMoB,SAAYrB,IACd,IAAKA,EAAI,MAAM,IAAIsB,MAAM,mEAAmEtB,KAC5F,OAAOuB,EAAQ9B,EAAqBI,UAAU2B,GAAaA,EAAUxB,IAAI,EAE7EC,MAAMwB,KAAO,IAAMxB,MAAMoB,SAAS"}